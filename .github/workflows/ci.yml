name: CI

on:
  push:

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout Skeleton Repository
        with:
          path: skeleton

      - uses: leafo/gh-actions-lua@v8.0.0
        name: Set Up Lua
        with:
          luaVersion: "5.2"

      - uses: leafo/gh-actions-luarocks@v4.0.0
        name: Set Up Luarocks

      - uses: actions/checkout@v3
        name: Pull GluaCheck
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck

      - name: Build GluaCheck
        working-directory: luacheck
        run: luarocks make

      - name: Run Luacheck Linting
        working-directory: skeleton
        run: |
          luacheck . \
            --no-redefined \
            --no-global --no-self \
            --no-max-line-length --no-max-code-line-length \
            --no-max-string-line-length --no-max-comment-line-length \
            --no-max-cyclomatic-complexity

  release:
    needs: linter
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout Skeleton Repository
        with:
          path: skeleton

      - name: Remove existing release & tag (if any)
        uses: actions/github-script@v6
        with:
          script: |
            const tag = 'release';
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: rel.data.id
              });
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              });
              core.info(`Deleted existing release & tag "${tag}"`);
            } catch (error) {
              if (error.status === 404) {
                core.info('No existing release/tag to delete');
              } else {
                throw error;
              }
            }

      - name: Prepare and Zip
        run: |
          mkdir packaged
          cp -R skeleton packaged/skeleton
          cd packaged
          zip -r ../skeleton.zip skeleton

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release
          release_name: Skeleton
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: skeleton.zip
          asset_name: skeleton.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}